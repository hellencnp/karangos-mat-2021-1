[{"/workspace/karangos-mat-2021-1/src/index.js":"1","/workspace/karangos-mat-2021-1/src/App.js":"2","/workspace/karangos-mat-2021-1/src/reportWebVitals.js":"3","/workspace/karangos-mat-2021-1/src/ui/TopBar.js":"4","/workspace/karangos-mat-2021-1/src/routed/KarangosList2.js":"5","/workspace/karangos-mat-2021-1/src/ui/FooterBar.js":"6","/workspace/karangos-mat-2021-1/src/routed/KarangosForm.js":"7","/workspace/karangos-mat-2021-1/src/ui/MainMenu.js":"8","/workspace/karangos-mat-2021-1/src/ui/ConfirmDialog.js":"9","/workspace/karangos-mat-2021-1/src/routed/Homepage.js":"10"},{"size":500,"mtime":1623846044482,"results":"11","hashOfConfig":"12"},{"size":2686,"mtime":1623847216061,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1623846044482,"results":"14","hashOfConfig":"12"},{"size":685,"mtime":1623846044482,"results":"15","hashOfConfig":"12"},{"size":6033,"mtime":1623846044482,"results":"16","hashOfConfig":"12"},{"size":1128,"mtime":1623846044482,"results":"17","hashOfConfig":"12"},{"size":11847,"mtime":1623846044482,"results":"18","hashOfConfig":"12"},{"size":1520,"mtime":1623846044482,"results":"19","hashOfConfig":"12"},{"size":1778,"mtime":1623846044482,"results":"20","hashOfConfig":"12"},{"size":3222,"mtime":1623848175846,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"nzx03y",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspace/karangos-mat-2021-1/src/index.js",[],["44","45"],"/workspace/karangos-mat-2021-1/src/App.js",[],"/workspace/karangos-mat-2021-1/src/reportWebVitals.js",[],"/workspace/karangos-mat-2021-1/src/ui/TopBar.js",[],"/workspace/karangos-mat-2021-1/src/routed/KarangosList2.js",[],"/workspace/karangos-mat-2021-1/src/ui/FooterBar.js",[],"/workspace/karangos-mat-2021-1/src/routed/KarangosForm.js",["46","47"],"import { useState, useEffect } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport InputMask from 'react-input-mask'\nimport { makeStyles } from '@material-ui/core/styles'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Button from '@material-ui/core/Button'\nimport axios from 'axios'\nimport { useHistory, useParams } from 'react-router-dom'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert'\nimport React from 'react'\nimport ConfirmDialog from '../ui/ConfirmDialog'\n\nconst useStyles = makeStyles(theme => ({\n  form: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    maxWidth: '80%',\n    margin: '0 auto',\n    '& .MuiFormControl-root': {\n      minWidth: '200px',\n      maxWidth: '500px',\n      margin: '0 24px 24px 0'\n    }\n  },\n  toolbar: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-around',\n    marginTop: '36px'\n  }\n}))\n\nexport default function KarangosForm() {\n  const classes = useStyles()\n\n  const colors = [\n    'Amarelo',\n    'Azul',\n    'Bege',\n    'Branco',\n    'Cinza',\n    'Dourado',\n    'Laranja',\n    'Marrom',\n    'Prata',\n    'Preto',\n    'Rosa',\n    'Roxo',\n    'Verde',\n    'Vermelho',\n    'Vinho'\n  ]\n\n  const years = []\n  for(let i = (new Date()).getFullYear(); i >= 1900; i--) years.push(i)\n\n  // Classes de caracters para a máscara da placa\n  // 1) Três primeiras posições, somente letras (maiúsculas ou minúsculas) ~> [A-Za-z]\n  // 2) Quinta, sétima e oitava posições, somente dígitos ~> [0-9]\n  // 3) Sexta posição: dígitos ou letras (maiúsculas ou minúsculas) de A a J ~> [0-9A-Ja-j]\n  const formatChars = {\n    'A': '[A-Za-z]',\n    '0': '[0-9]',\n    '#': '[0-9A-Ja-j]'\n  }\n\n  // Máscara de entrada para a placa\n  const placaMask = 'AAA-0#00'\n\n  // Máscara para CPF: '000.000.000-00'\n  // Máscara para CNPJ: '00.000.000/0000-00'\n\n  const [karango, setKarango] = useState({\n    id: null,\n    marca: '',\n    modelo: '',\n    cor: '',\n    ano_fabricacao: (new Date()).getFullYear(),    // Ano corrente\n    importado: '0',\n    placa: '',\n    preco: 0\n  })\n  const [currentId, setCurrentId] = useState()\n\n  const [importadoChecked, setImportadoChecked] = useState(false)\n\n  const [sendBtnStatus, setSendBtnStatus] = useState({\n    disabled: false,\n    label: 'Enviar'\n  })\n\n  const [sbStatus, setSbStatus] = useState({\n    open: false,\n    severity: 'success',\n    message: '' \n  })\n\n  const [error, setError] = useState({\n    marca: '',\n    modelo: '',\n    cor: '',\n    placa: '',\n    preco: ''\n  })\n\n  const [isModified, setIsModified] = useState(false)\n\n  const [dialogOpen, setDialogOpen] = useState(false) // O diálogo de confirmação está aberto?\n\n  const [title, setTitle] = useState('Cadastrar novo karango')\n\n  const history = useHistory()\n  const params = useParams()\n\n  // useEffect() para quando o formulário for carregado (só na inicialização)\n  useEffect(() => {\n    // Verificamos se a rota atual contém o parâmetro id\n    // Em caso positivo, buscamos os dados no back-end e carregamos o formulário para edição\n    if(params.id) {\n      setTitle('Editar karango')\n      getData(params.id)\n    }\n  }, [])\n\n  async function getData(id) {\n    try {\n      let response = await axios.get(`https://api.faustocintra.com.br/karangos/${id}`)\n      setKarango(response.data)\n    }\n    catch(error) {\n      setSbStatus({\n        open: true,\n        severity: 'error',\n        message: 'Não foi possível carregar os dados para edição.'\n      })\n    }\n  }\n\n  function handleInputChange(event, property) {\n\n    const karangoTemp = {...karango}\n\n    setCurrentId(event.target.id)\n    if(event.target.id) property = event.target.id\n\n    if(property === 'importado') {\n      const newState = ! importadoChecked // Inverte o valor\n      if(newState) karangoTemp.importado = '1'\n      else karangoTemp.importado = '0'\n      setImportadoChecked(newState) \n    }\n    else if(property === 'placa') {\n      karangoTemp.placa = event.target.value.toUpperCase()\n    }\n    else {\n      // Quando o nome de uma propriedade de objeto aparece entre [],\n      // significa que o nome da propriedade será determinado pela\n      // variável ou expressão contida dentro dos colchetes\n      karangoTemp[property] = event.target.value\n    }\n    setKarango(karangoTemp)\n    setIsModified(true)   // O formulário foi modificado\n    validate(karangoTemp)  // Dispara a validação\n  }\n\n  function validate(data) {\n    let isValid = true\n\n    const errorTemp = {\n      marca: '',\n      modelo: '',\n      cor: '',\n      placa: '',\n      preco: ''\n    }\n\n    // trim(): retira espaços em branco do início e do final de uma string\n    if(data.marca.trim() === '') {\n      errorTemp.marca = 'A marca deve ser preenchida'\n      isValid = false\n    }     \n\n    if(data.modelo.trim() === '') {\n      errorTemp.modelo = 'O modelo deve ser preenchido'\n      isValid = false\n    }\n\n    if(data.cor.trim() === '') {\n      errorTemp.cor = 'A cor deve ser informada'\n      isValid = false\n    }\n\n    // A placa não pode ser string vazia nem conter sublinhado\n    if(data.placa.trim() === '' || data.placa.includes('_')) {\n      errorTemp.placa = 'A placa deve ser preenchida corretamente'\n      isValid = false\n    }\n\n    // O preço deve ser numérico e maior que zero\n    if(isNaN(data.preco) || Number(data.preco) <= 0) {\n      errorTemp.preco = 'O preço deve ser informado e maior que zero'\n      isValid = false\n    }\n\n    setError(errorTemp)\n    return isValid\n  }\n\n  async function saveData() {\n    try {\n      // Desabilita o botão de enviar para evitar envios duplicados\n      setSendBtnStatus({disabled: true, label: 'Enviando...'})\n      \n      // Se estivermos editando, precisamos enviar os dados com o verbo HTTP PUT\n      if(params.id) await axios.put(`https://api.faustocintra.com.br/karangos/${params.id}`, karango)\n      // Senão, estaremos criando um novo registro, e o verbo HTTP a ser usado é o POST\n      else await axios.post('https://api.faustocintra.com.br/karangos', karango)\n      \n      // Mostra a SnackBar\n      setSbStatus({open: true, severity: 'success', message: 'Dados salvos com sucesso!'})\n      \n    }\n    catch(error) {\n      // Mostra a SnackBar\n      setSbStatus({open: true, severity: 'error', message: 'ERRO: ' + error.message})\n    }\n    // Restaura o estado inicial do botão de envio\n    setSendBtnStatus({disabled: false, label: 'Enviar'})\n  }\n\n  function handleSubmit(event) {\n\n    event.preventDefault()    // Evita que a página seja recarregada\n\n    // Só envia para o banco de dados se o formulário for válido\n    if(validate(karango)) saveData()\n\n  }\n\n  function handleSbClose() {\n    setSbStatus({...sbStatus, open: false})\n\n    // Retorna para a página de listagem em caso de sucesso\n    if(sbStatus.severity === 'success') history.push('/list')\n  }\n\n  function handleDialogClose(result) {\n    setDialogOpen(false)\n\n    // Se o usuário concordou em voltar \n    if(result) history.push('/list')\n  }\n\n  function handleGoBack() {\n    // Se o formulário tiver sido modificado, exibimos o diálogo de confirmação\n    if(isModified) setDialogOpen(true)\n    // Senão, podemos voltar diretamente para a listagem\n    else history.push('/list')\n  }\n\n  return (\n    <>\n\n      <ConfirmDialog isOpen={dialogOpen} onClose={handleDialogClose}>\n        Há dados não salvos. Deseja realmente voltar?\n      </ConfirmDialog>\n\n      <Snackbar open={sbStatus.open} autoHideDuration={6000} onClose={handleSbClose}>\n        <MuiAlert elevation={6} variant=\"filled\" onClose={handleSbClose} severity={sbStatus.severity}>\n          {sbStatus.message}\n        </MuiAlert>\n      </Snackbar>\n\n      <h1>{title}</h1>\n      <form className={classes.form} onSubmit={handleSubmit}>\n        \n        <TextField \n          id=\"marca\" \n          label=\"Marca\" \n          variant=\"filled\"\n          value={karango.marca}\n          onChange={handleInputChange}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe a marca do veículo\"\n          fullWidth\n          error={error.marca !== ''}\n          helperText={error.marca}\n        />\n\n        <TextField \n          id=\"modelo\" \n          label=\"Modelo\" \n          variant=\"filled\"\n          value={karango.modelo}\n          onChange={handleInputChange}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o modelo do veículo\"\n          fullWidth\n          error={error.modelo !== ''}\n          helperText={error.modelo}\n        />\n\n        <TextField \n          id=\"cor\" \n          label=\"Cor\" \n          variant=\"filled\"\n          value={karango.cor}\n          onChange={event => handleInputChange(event, 'cor')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe a cor do veículo\"\n          select\n          fullWidth\n          error={error.cor !== ''}\n          helperText={error.cor}\n        >\n          { colors.map(color => <MenuItem value={color} key={color}>{color}</MenuItem>)}\n        </TextField>\n\n        <TextField \n          id=\"ano_fabricacao\" \n          label=\"Ano de fabricação\" \n          variant=\"filled\"\n          value={karango.ano_fabricacao}\n          onChange={event => handleInputChange(event, 'ano_fabricacao')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o ano de fabricação do veículo\"\n          select\n          fullWidth\n        >\n          { years.map(year => <MenuItem value={year} key={year}>{year}</MenuItem>)}\n        </TextField>\n\n        <FormControl fullWidth>\n          <FormControlLabel control={\n            <Checkbox\n              id=\"importado\"\n              checked={importadoChecked}\n              onChange={handleInputChange}\n            />\n          }\n          label=\"Importado?\"\n        />\n        </FormControl>\n\n        <InputMask\n          id=\"placa\" \n          mask={placaMask}\n          formatChars={formatChars}\n          value={karango.placa}\n          onChange={(event) => handleInputChange(event, 'placa')}\n        >\n          {() => <TextField \n            label=\"Placa\" \n            variant=\"filled\"\n            required  /* not null, precisa ser preenchido */\n            placeholder=\"Informe a placa do veículo\"\n            fullWidth\n            error={error.placa !== ''}\n            helperText={error.placa}\n          />}\n        </InputMask>\n\n        <TextField \n          id=\"preco\" \n          label=\"Preço\" \n          variant=\"filled\"\n          value={karango.preco}\n          onChange={handleInputChange}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o valor do veículo\"\n          fullWidth\n          type=\"number\"\n          onFocus={event => event.target.select()}  // Seleciona o conteúdo ao focar\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">R$</InputAdornment>,\n          }}\n          error={error.preco !== ''}\n          helperText={error.preco}\n        />\n\n        <Toolbar className={classes.toolbar}>\n          <Button type=\"submit\" variant=\"contained\" color=\"secondary\" disabled={sendBtnStatus.disabled}>\n            {sendBtnStatus.label}\n          </Button>\n          <Button variant=\"contained\" onClick={handleGoBack}>Voltar</Button>\n        </Toolbar>\n\n        {/* <div>\n          {JSON.stringify(karango)}\n          <br />\n          currentId: {JSON.stringify(currentId)}\n          <br />\n          isModified: {JSON.stringify(isModified)}\n        </div> */}\n      </form>\n    </>\n  )\n}","/workspace/karangos-mat-2021-1/src/ui/MainMenu.js",[],"/workspace/karangos-mat-2021-1/src/ui/ConfirmDialog.js",[],"/workspace/karangos-mat-2021-1/src/routed/Homepage.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":90,"column":10,"nodeType":"54","messageId":"55","endLine":90,"endColumn":19},{"ruleId":"56","severity":1,"message":"57","line":130,"column":6,"nodeType":"58","endLine":130,"endColumn":8,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'currentId' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [params.id]",{"range":"65","text":"66"},[3449,3451],"[params.id]"]